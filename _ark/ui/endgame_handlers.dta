{func goto_endgame_complete
   {ui goto_screen {if_else $disable_save complete_screen highscore_screen}}}

#define ADJS
(((adj_c_1 adj_c_2 adj_c_3 adj_c_4 adj_c_5 adj_c_6 adj_c_7 adj_c_8 adj_c_9)
(adj_b_1 adj_b_2 adj_b_3 adj_b_4 adj_b_5 adj_b_6 adj_b_7 adj_b_8 adj_b_9 adj_b_10)
(adj_a_1 adj_a_2 adj_a_3 adj_a_4 adj_a_5 adj_a_6 adj_a_7 adj_a_8 adj_a_9 adj_a_10)))

#define VERBS
(((verb_c_1 verb_c_2 verb_c_3 verb_c_4)
(verb_b_1 verb_b_2 verb_b_3 verb_b_4 verb_b_5 verb_b_6 verb_b_7 verb_b_8 verb_b_9)
(verb_a_1 verb_a_2 verb_a_3 verb_a_4 verb_a_5 verb_a_6 verb_a_7 verb_a_8 verb_a_9)))

#define VERBS_PAST
(((verb_past_c_1 verb_past_c_2 verb_past_c_3 verb_past_c_4)
(verb_past_b_1 verb_past_b_2 verb_past_b_3 verb_past_b_4 verb_past_b_5 verb_past_b_6 verb_past_b_7 verb_past_b_8 verb_past_b_9)
(verb_past_a_1 verb_past_a_2 verb_past_a_3 verb_past_a_4 verb_past_a_5 verb_past_a_6 verb_past_a_7 verb_past_a_8 verb_past_a_9)))

#define NOUNS
(((concert_c_1 concert_c_2)
(concert_b_1 concert_b_2)
(concert_a_1 concert_a_2 concert_a_3)))

#define TAKE_VERBS
(((take_verb_1 take_verb_2 take_verb_3 take_verb_4)
(take_verb_1 take_verb_2 take_verb_3 take_verb_4)
(take_verb_1 take_verb_2 take_verb_3 take_verb_4)))

#define TAKE_NOUNS
(((take_noun_c_1 take_noun_c_2 take_noun_c_3)
(take_noun_b_1 take_noun_b_2 take_noun_b_3)
(take_noun_a_1 take_noun_a_2 take_noun_a_3)))

#define BATTLE_WIN_PHRASE
(((win_phrase_c_1 win_phrase_c_2)
(win_phrase_b_1 win_phrase_b_2)
(win_phrase_a_1 win_phrase_a_2)))

#define WIN_VS_VERB
(((win_vs_verb_c_1 win_vs_verb_c_2)
(win_vs_verb_b_1 win_vs_verb_b_2)
(win_vs_verb_a_1 win_vs_verb_a_2)))

#define WIN_VS_CONCERT
(((win_vs_noun_c_1 win_vs_noun_c_2)
(win_vs_noun_b_1 win_vs_noun_b_2)
(win_vs_noun_a_1 win_vs_noun_a_2)))

#define TOOGLE_HEAD_QP ((toogle_headline_qp_1 toogle_headline_qp_2 toogle_headline_qp_3 toogle_headline_qp_4)) ;macros for autoplay headline generation
#define TOOGLE_HEAD_CA ((toogle_headline_ca_1 toogle_headline_ca_2 toogle_headline_ca_3 toogle_headline_ca_4))
#define TOOGLE_HEAD_VSP1 ((toogle_headline_vsp1_1 toogle_headline_vsp1_2 toogle_headline_vsp1_3 toogle_headline_vsp1_4))
#define TOOGLE_HEAD_VSP2 ((toogle_headline_vsp2_1 toogle_headline_vsp2_2 toogle_headline_vsp2_3 toogle_headline_vsp2_4))
#define TOOGLE_HEAD_VS ((toogle_headline_vs_1 toogle_headline_vs_2 toogle_headline_vs_3 toogle_headline_vs_4))
#define TOOGLE_HEAD_COP1 ((toogle_headline_cop1_1 toogle_headline_cop1_2 toogle_headline_cop1_3 toogle_headline_cop1_4))
#define TOOGLE_HEAD_COP2 ((toogle_headline_cop2_1 toogle_headline_cop2_2 toogle_headline_cop2_3 toogle_headline_cop2_4))
#define TOOGLE_HEAD_CO ((toogle_headline_co_1 toogle_headline_co_2 toogle_headline_co_3 toogle_headline_co_4))

#define HEADLINE_HANDLERS ; Added handlers for all game modes and p1/p2/both possibilities
(
    (gen_toogle_head_qp {$this generate_headline {random_elem TOOGLE_HEAD_QP}})
    (gen_toogle_head_ca {$this generate_headline {random_elem TOOGLE_HEAD_CA}})
    (gen_toogle_head_vsp1  {$this generate_headline {random_elem TOOGLE_HEAD_VSP1}})
    (gen_toogle_head_vsp2 {$this generate_headline {random_elem TOOGLE_HEAD_VSP2}})
    (gen_toogle_head_vs {$this generate_headline {random_elem TOOGLE_HEAD_VS}})
    (gen_toogle_head_cop1 {$this generate_headline {random_elem TOOGLE_HEAD_COP1}})
    (gen_toogle_head_cop2 {$this generate_headline {random_elem TOOGLE_HEAD_COP2}})
    (gen_toogle_head_co {$this generate_headline {random_elem TOOGLE_HEAD_CO}})
    (gen_headline_tour_1
      {do
         ($index {- {player0 num_stars} 3})
         {$this generate_headline headline1
            (adj {localize {random_elem {elem ADJS $index}}})
            (noun {localize {random_elem {elem NOUNS $index}}})
            (verb_past {localize {random_elem {elem VERBS_PAST $index}}})}})
   (gen_headline_tour_2
      {do
         ($index {- {player0 num_stars} 3})
         {$this generate_headline headline2
            (noun {localize {random_elem {elem NOUNS $index}}})
            (verb {localize {random_elem {elem VERBS $index}}})}})
   (gen_headline_tour_3
      {do
         ($index {- {player0 num_stars} 3})
         {$this
            generate_headline
            headline3
            (verb {localize {random_elem {elem TAKE_VERBS $index}}})
            (noun {localize {random_elem {elem TAKE_NOUNS $index}}})}})
   (gen_battle_headline
      {do
         ($index {- {player0 num_stars} 3})
         {$this generate_headline headline_battle
            (win_phrase {localize {random_elem {elem BATTLE_WIN_PHRASE $index}}})}})
   (gen_headline_perfect
      {$this generate_headline headline_perfect})
   (gen_headline_perfect_coop
      {$this generate_headline headline_perfect_coop})
   (gen_headline_qc_1
      {do
         ($index {- {player0 num_stars} 3})
         {$this generate_headline headline_quick_coop1
            (adj {localize {random_elem {elem ADJS $index}}})
            (noun {localize {random_elem {elem NOUNS $index}}})
            (verb {localize {random_elem {elem VERBS $index}}})}})
   (gen_headline_qc_2
      {do
         ($index {- {player0 num_stars} 3})
         {$this
            generate_headline
            headline_quick_coop2
            (adj {localize {random_elem {elem ADJS $index}}})
            (noun {localize {random_elem {elem NOUNS $index}}})
            (verb_past {localize {random_elem {elem VERBS_PAST $index}}})}})
   (gen_versus_headline
      {if_else {== {player0 score} {player1 score}}
         {$this generate_headline headline_vs_tie}
         {do
            ($spread {$this get_versus_spread {player0 score} {player1 score}})
            ($winner
               {if_else {> {player1 score} {player0 score}}
                  "2"
                  "1"})
            {$this generate_headline headline_vs
               (num $winner)
               (vs_verb {localize {random_elem {elem WIN_VS_VERB $spread}}})
               (vs_noun {localize {random_elem {elem WIN_VS_CONCERT $spread}}})}}})
    (set_headline
        ($label)
        {$label set_localized_text
         {$this {cond
               ({&&
                     {== multi_coop {gamecfg get mode}}
                     {== {player0 percent_hit} 100}
                     {== {player1 percent_hit} 100}}
                  gen_headline_perfect_coop)
               ({== multi_coop {gamecfg get mode}}
                  {random_elem (gen_headline_qc_1 gen_headline_qc_2)})
               ({== quickplay {gamecfg get mode}}
                  {if_else {== {player0 percent_hit} 100}
                     gen_headline_perfect_coop
                     {random_elem (gen_headline_qc_1 gen_headline_qc_2)}})
               ({&&
                     {== career {gamecfg get mode}}
                     {== {player0 percent_hit} 100}}
                  gen_headline_perfect)
               ({== career {gamecfg get mode}}
                  {if_else {== {game get_venue} battle}
                     gen_battle_headline
                     {random_elem (gen_headline_tour_3 gen_headline_tour_2 gen_headline_tour_1)}})
               ({'||'
                     {==
                        multi_vs
                        {gamecfg get mode}}
                     {== multi_fo {gamecfg get mode}}}
                  gen_versus_headline)}}}

        ;Handle setting headline for the various autoplay combos
        {switch
            {gamecfg get mode}
                (career {if {player_matcher0 auto_play} {$label set_localized_text {$this gen_toogle_head_ca}}})
                (quickplay {if {player_matcher0 auto_play} {$label set_localized_text {$this gen_toogle_head_qp}}})
                (multi_vs
                    {if {&& {player_matcher0 auto_play} {player_matcher1 auto_play}} ; If both auto
                        {$label set_localized_text {$this gen_toogle_head_vs}}}
                    {if {&& {player_matcher0 auto_play} {! {player_matcher1 auto_play}}} ; If p1 auto
                        {$label set_localized_text {$this gen_toogle_head_vsp1}}}
                    {if {&& {! {player_matcher0 auto_play}} {player_matcher1 auto_play}} ; If p2 auto
                        {$label set_localized_text {$this gen_toogle_head_vsp2}}})
                (multi_fo
                    {if {&& {player_matcher0 auto_play} {player_matcher1 auto_play}} ; If both auto
                        {$label set_localized_text {$this gen_toogle_head_vs}}}
                    {if {&& {player_matcher0 auto_play} {! {player_matcher1 auto_play}}} ; If p1 auto
                        {$label set_localized_text {$this gen_toogle_head_vsp1}}}
                    {if {&& {! {player_matcher0 auto_play}} {player_matcher1 auto_play}} ; If p2 auto
                        {$label set_localized_text {$this gen_toogle_head_vsp2}}})
                (multi_coop
                    {if {&& {player_matcher0 auto_play} {player_matcher1 auto_play}} ; If both auto
                        {$label set_localized_text {$this gen_toogle_head_co}}}
                    {if {&& {player_matcher0 auto_play} {! {player_matcher1 auto_play}}} ; If p1 auto
                        {$label set_localized_text {$this gen_toogle_head_cop1}}}
                    {if {&& {! {player_matcher0 auto_play}} {player_matcher1 auto_play}} ; If p2 auto
                        {$label set_localized_text {$this gen_toogle_head_cop2}}})
        }
))
#define ENDGAME_PANEL_HANDLERS
((enter
     {gamecfg foreach_player $player
         {do
            ($gems_hit {$player gems_hit})
            ($gems_total {'+' $gems_hit {$player gems_passed}})
            {{sprint $player "_notes_hit.lbl"} set_localized_text {sprint $gems_hit "/" $gems_total}}}
         {{sprint $player "_sp_phrases.lbl"} set_localized_text {$player sp_phrases}}}
      {if_else {gamecfg multiplayer}
         {$this update_multiplayer_stats}
         {$this update_singleplayer_stats}}
     {winner_photo0.mesh set_local_pos 33 0 -24}
     {winner_photo0.mesh set_local_scale 1.1 1.1 1.1}
     {endgame_review_data.lbl set_local_pos 170 60 -20}
	 {endgame_percent.lbl set_showing FALSE}
     {morestats.grp set_local_pos -190 -200 135}
     {label_notes_hit.lbl set_local_pos 260 100 -115}
     {label_sp_phrases.lbl set_local_pos 260 100 -105}
     {label_avg_multi.lbl set_local_pos 260 100 -95}
     {player0_notes_hit.lbl set_local_pos 320 100 -115}
     {player0_sp_phrases.lbl set_local_pos 320 100 -105}
     {player0_avg_multi.lbl set_local_pos 320 100 -95}
     {sel_section.lst set_local_pos -340 230 40}
	 {sel_section2.lst set_local_pos -335 230 -120}
     {sel_section.lst set_local_rot 0 -2 0}
	 {sel_section2.lst set_local_rot 0 -2 0}
     {sel_section.lst
         set_data
         (
		   "      MODIFIERS"
		  {sprint "Track Speed: " {int {'+' 0.5 {'*' $trackspd 100}}} "%"}
          {sprint {localize endgame_brutalmode} ": " {if_else $brutalmode "ON" "OFF"}}
          {sprint {localize endgame_focusmode} ": " {if_else $focusmode "ON" "OFF"}}
		  {sprint {localize endgame_highwayshake} ": " {if_else $highwayshake "ON" "OFF"}}
		  {sprint {localize endgame_brighthopos} ": " {if_else $brighthopos "ON" "OFF"}}
		  {sprint {localize endgame_darkstrums} ": " {if_else $darkstrums "ON" "OFF"}}
		  {sprint {localize endgame_nofail} ": " {if_else $nofail "ON" "OFF"}}
		  )}
	  {sel_section2.lst
         set_data
         (
		  {sprint {localize endgame_towel} ": " {if_else $towel "ON" "OFF"}}
		  {sprint {localize endgame_gh1track} ": " {if_else $gh1track "ON" "OFF"}}
		  {sprint {localize endgame_neckless} ": " {if_else {'||' $neckless $cheat_enabled_performance_mode} "ON" "OFF"}}
		  {sprint {localize endgame_roxbury} ": " {if_else $barf_cheat "ON" "OFF"}}
		  )}
      {set $song_text1 {game get_song_text}}
      {if_else {!= $speedmod 1}
         {set $song_text2 {sprint $song_text1 " (" {int {'+' 0.5 {'*' $speedmod 100}}} "%)"}}
         {set $song_text2 $song_text1}}
      {endgame_song_data.lbl set_text $song_text2}
      {endgame_diff_data.lbl set_text {game get_difficulty_sym 0}}
      {do
         ($player player0)
         {endgame_score_data.lbl set_localized_text {sprint {$player score}}}
         {endgame_streak_data.lbl set_localized_text {sprint {$player longest_streak}}}
         {if_else $player0_fc
            {endgame_percent_data.lbl set_localized_text {sprint {localize fullcombo}}}
            {endgame_percent_data.lbl set_localized_text {sprintf {localize eg_percent_format} {$player percent_hit}}}}
         {endgame_streak_data.lbl set_localized_text {sprintf {localize eg_streak_format} {$player longest_streak}}}
         {endgame_review_data.lbl set_text {$player star_rating}} ; Original stars font
         {endgame_review_data_fc.lbl set_text {$player star_rating}} ; New stars FC font
         {percentbar_p1.mesh set_local_scale {/ {$player percent_hit} 100.0}
            1
            1}}
          {endgame_review_data_fc.lbl set_showing FALSE}
          {endgame_review_data.lbl set_showing TRUE} ; If P0 didn't FC, use old label
      {$this set_headline endgame_headline.lbl}
      {if {player_matcher0 auto_play} ; Check for autoplay on player 1
        {do
          {endgame_percent_data.lbl set_text toogle_label} ; percentage to AUTOPLAY
          {endgame_review_data_fc.lbl set_showing FALSE} ; hide FC stars
          {endgame_review_data.lbl set_showing TRUE} ; show non-FC stars
        }})
   (update_singleplayer_stats
      {do
         ($avg_multi {max 1 {player0 avg_multiplier}})
         {player0_avg_multi.lbl
            set_localized_text
            {sprintf {localize stat_avg_multi_format}
               {int $avg_multi}
               {mod {int {'*' 10 $avg_multi}} 10}}}})
   (update_multiplayer_stats
      {do
         ($p0hit {player0 gems_hit})
         ($p0all {'+' $p0hit {player0 gems_passed}})
         ($p1hit {player1 gems_hit})
         ($p1all {'+' $p1hit {player1 gems_passed}})
         {if_else {> {'*' $p0hit $p1all} {'*' $p1hit $p0all}}
            {do {player0_best.lbl set_showing TRUE} {player1_best.lbl set_showing FALSE}}
            {do {player1_best.lbl set_showing TRUE} {player0_best.lbl set_showing FALSE}}}}
      {if_else {== {gamecfg get mode} multi_coop}
         {$this update_coop_stats}
         {$this update_faceoff_stats}})
   (update_coop_stats
      {stats_coop.grp set_showing TRUE}
      {stats_faceoff.grp set_showing FALSE}
      {gamecfg foreach_player $player
         {{sprint $player "_streaks_broken.lbl"}
            set_localized_text
            {sprint {$player streaks_broken}}}})
   (update_faceoff_stats
      {stats_coop.grp set_showing FALSE}
      {stats_faceoff.grp set_showing TRUE}
      {gamecfg foreach_player $player
         {{sprint $player "_lead_time.lbl"} set_localized_text {sprintf {localize eg_percent_format} {int {/ {'*' 100 {$player lead_time_sec}} {game song_duration_sec}}}}}})
)
#define ENDGAME_STATS_HANDLER
((enter
      {gamecfg set mode practice}
      {gamecfg
         set
         (practice_sections 0)
         -1}
      {gamecfg
         set
         (practice_sections 1)
         -1}
      {sel_section.lst
         set_provider
         {game practice_section_provider}}
      {title.lbl set_text select_start_section}
      {set
         [section]
         0}
      {cp_title.lbl set_local_pos 70 50 -15}
      {pencil.mesh set_local_pos 250 30 -30}
      {pencil_shadow.mesh set_local_pos 180 30 -30}
      {notebook.mesh set_local_scale 1.4 1 1}
      {ss_song.lst set_local_pos 160 230 140}
      {ss_song.lst set_local_rot 0 4 0}
      {ss_song.lst set_provider {new StatsProvider stats_provider}})
   (SELECT_START_MSG
      {do
         ($idx
            {-
               {ss_song.lst selected_pos}
               1})
         {if_else
            [section]
            {if_else
               {<
                  $idx
                  {gamecfg
                     get
                     (practice_sections 0)}}
               {handle
                  (ui BAD_SELECT_START_MSG)}
               {do
                  {gamecfg
                     set
                     (practice_sections 1)
                     $idx}
				  {gamecfg set mode practice}
                  {gamecfg set practice_speed 0}
                  {ui goto_screen practice_loading_screen}
                  kDataUnhandled}}
            {if_else
               {== $idx -1}
               {do
			      {gamecfg set mode practice}
                  {gamecfg set practice_speed 0}
                  {gamecfg
                     set
                     (practice_sections 0)
                     -1}
                  {gamecfg
                     set
                     (practice_sections 1)
                     -1}
                  {ui goto_screen practice_loading_screen}
                  kDataUnhandled}
               {do
                  {gamecfg
                     set
                     (practice_sections 0)
                     $idx}
                  {set
                     [section]
                     1}
                  {section_provider set_start_section $idx}
                  kDataUnhandled}}}})
   (BUTTON_DOWN_MSG
      {cond
         ({== $button kPad_Tri}
            {synth play_sequence button_select}
            {ui goto_screen endgame_screen})
         ({&&
               {== $button kPad_Tri}
               {==
                  [section]
                  1}}
            {set
               [section]
               0}
            {section_provider set_start_section -1}
            TRUE)
         (TRUE kDataUnhandled)})
)
{func
   is_updown_button
   ($button)
   {'||'
      {== $button kPad_DDown}
      {== $button kPad_DUp}}}
#define ENDGAME_ENCORE_LETTERS
((endgame_encore_letter3 endgame_encore_letter4 endgame_encore_letter5 endgame_encore_letter6))
{func get_highscore_index
   ($score)
   {'+' {highscores check_highscore $score} 1}}
#define HIGHSCORE_HANDLERS
((enter
      {set [auto_add] {== quickplay {gamecfg get mode}}}
      {set [flushed] FALSE}
      {hs_stats.lbl set_localized_text
         {sprintf {localize highscore_score_fmt}
            {game get_song_text}
            {localize
               {game get_difficulty_sym 0}}}}
      {do
         ($score {player0 score})
         ($index {get_highscore_index $score})
         {$this fill_scores $index $score {$this get_default_name}}
         {if_else {!= $index 0}
            {$this enter_score $index}
            {if_else [auto_add]
               {ui goto_screen complete_screen}
               {$this view_scores}}}}
      {highscore_screen update_help_bar})
   (fill_scores
      ($new_index $new_score $new_name)
      {do
         ($slot 0)
         {foreach_int $i 1 6
            {do
               ($name 0)
               ($score 0)
               {if_else {== $i $new_index}
                  {$this set_entry $i $new_name $new_score}
                  {do
                     {highscores get_highscore $slot $name $score}
                     {$this set_entry $i $name $score}
                     {'++' $slot}}}}}})
   (get_default_name
      {if_else [auto_add]
         {campaign profile_name {campaign profile_slot}}
         {highscores get_default_name}})
   (set_entry
      ($index $name $score)
      {do
         ($name_lbl {sprintf "hs_name%d.lbl" $index})
         ($score_lbl {sprintf "hs_score%d.lbl" $index})
         {$name_lbl set_localized_text $name}
         {$score_lbl set_text {sprintf "%d" $score}}})
   (get_text_entry
      ($index)
      {sprintf "hs_entry%d.ten" $index})
   (get_name_label
      ($index)
      {sprintf "hs_name%d.lbl" $index})
   (enter_score
      ($index)
      {hs_flush.tnm set_frame 0}
      {do
         ($ten {$this get_text_entry $index})
         {$ten set_text {$this get_default_name}}
         {if_else [auto_add]
            {do
               {set [active_ten] 0}
               {$this set_text_entry -1}
               {hs_start.lbl set_showing FALSE}
               {highscores add {$ten get_text} {player0 score}}}
            {do
               {set [active_ten] $ten}
               {$this set_text_entry $index}
               {$this set_focus $ten}}}
         {printf
            {$ten get_text}}})
   (view_scores
      {printf "view_scores\n"}
      {set [active_ten] 0}
      {$this set_text_entry -1}
      {hs_start.lbl set_showing FALSE})
   (set_text_entry
      ($index)
      {foreach_int $i 1 6
         {{$this get_text_entry $i}
            set_showing
            {== $i $index}}
         {{$this get_name_label $i}
            set_showing
            {!= $i $index}}})
   (get_active_ten
      {if_else [active_ten]
         {$this find [active_ten]}
         NULL})
   (poll
      {if {&&
      {!= {$this get_active_ten} NULL}
      {{$this get_active_ten} is_done}
            {! [flushed]}}
         {set [flushed] TRUE}
         {hs_flush.tnm animate
            (range 0 17)
            (period 1)
            (units kTaskUISeconds)}
         {play_sfx flush}
         {highscore_screen update_help_bar}
         {script_task
            (delay 7)
            (units kTaskUISeconds)
            (script {ui goto_screen complete_screen})}})
)